@page
@model Web2.Pages.ChartModel
@{
    ViewData["Title"] = "Графики";
}

<head>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
</head>

<body>

    <form method="post"></form>

    <div data-aos="fade-up-left" style="display: flex;">

    <div class="all_charts">

    <div class="text-center">
        <h4 class="display-4">Распространенность патологий</h4>
        <div class="card">
            <div class="chart-container">
                <canvas id="bar-chart" width="100" height="300"></canvas>
            </div>
        </div>
    </div>
    <p>
        <div class="row">
            <div class="col-md-3" style="width: 30%; margin: 5px 20px 5px 20px;">
                <label class="form-label" style="font-size: 18px; ">Группа</label>
                <select class="form-select" name="G1" id="G" asp-items="Model.GetGroup()">
                    <option value=""></option>
                </select>
            </div>
        </div>
    </p>

    <div class="form-group">
        <input type="submit" style="margin: 5px 20px 5px 20px;" value="Выбрать" class="btn btn-primary" onclick="updateBar()" />
    </div>

    </div>

    <div class="all_legents">

        <div style="display:flex; justify-content: space-between; flex-direction: column;">

            <p style="display:flex;">
                    <label style="color: rgba(255, 99, 132, 1);">■ </label>
                    <label> – изменение контуров замыкательных пластинок</label>
            </p>

                <p style="display:flex;">
                    <label style="color: rgba(54, 162, 235, 1);">■ </label>
                    <label> – клиновидная форма тел позвонков</label>
            </p>

                <p style="display:flex;">
                    <label style="color: rgba(255, 206, 86, 1);">■ </label>
                    <label> – грыжи Шморля</label>
            </p>

                <p style="display:flex;">
                    <label style="color: rgba(75, 192, 80, 1);">■ </label>
                    <label> – остеопороз тел позвонков</label>
            </p>

                <p style="display:flex;">
                    <label style="color: rgba(153, 102, 255, 1);">■ </label>
                    <label> – уменьшение высоты межпозвоночного диска</label>
            </p>

                <p style="display:flex;">
                    <label style="color: rgba(242, 124, 57, 1);">■ </label>
                    <label> – изменение контуров апофизов</label>
            </p>

                <p style="display:flex;">
                    <label style="color: rgba(56, 204, 167, 1);">■ </label>
                    <label> – остеохондроз</label>
                </p>

            <p style="display:flex;">
                    <label style="color: rgba(213, 240, 117, 1);">■ </label>
                    <label> – стабилографические изменения</label>
            </p>

                <p style="display:flex;">
                    <label style="color: rgba(247, 135, 223, 1);">■ </label>
                    <label> – ЭНМГ (болезни двигательных нейронов)</label>
            </p>

        </div>
    </div>


    </div>

    <div data-aos="fade-up-left">

    <div class="all_charts" style="margin: 50px 0px; width: 100%;">

    <div class="text-center">
        <h4 class="display-4">Распределение показателя</h4>
        <h4 id="text" class="display-6">@Model.NameA</h4>
        <div class="card">
            <div class="chart-container">
                <canvas id="bar-chart2" width="100" height="300"></canvas>
            </div>
        </div>
    </div>

    <p>
        <div class="row" style="width: 70%; margin: 5px 20px 5px 5px;">
            <div class="col-md-3">
                <label class="form-label">Группа</label>
                <select class="form-select" name="G2" id="G2" asp-items="Model.GetGroup()">
                    <option value=""></option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Показателя</label>
                <select class="form-select" name="K" id="N" asp-items="Model.GetAnalysis()"></select>
            </div>
        </div>
    </p>

        <p style="margin: 5px 20px 5px 20px;">Цвет графика: <input type="color" name="bg" id="col" value="#DC143C"> </p>

    <div class="form-group">
        <input type="submit" style="margin: 5px 20px 5px 20px;" value="Выбрать" class="btn btn-primary" onclick="updateCharts()"/>
    </div>

    </div>

    </div>

	@section scripts{

        <script src="~/scripts/Color.js"></script>

        <script>

            var Count = [];
            var Pathologies = [ "Изм.Конт.", "Клин.Форм.", "Грыжи Шморля", "Остеоп.", "Умен.Выс.", "Изм.Апоф.", "Остеох.", "Стаб.Изм.", "ЭНМГ" ];

            @if (Model.GetData1(Model.G).Count > 0)
            {
                foreach (var item in Model.GetData1(Model.G))
                {
                    @:Count.push(@item.Count);
                }
            }

                var Patholog = {
                label: "Patholog",
                data: Count,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.5)',
                    'rgba(54, 162, 235, 0.5)',
                    'rgba(255, 206, 86, 0.5)',
                    'rgba(75, 192, 80, 0.5)',
                    'rgba(153, 102, 255, 0.5)',
                    'rgba(242, 124, 13, 0.5)',
                    'rgba(56, 204, 167, 0.5)',
                    'rgba(213, 240, 117, 0.5)',
                    'rgba(247, 135, 223, 0.5)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 80, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(242, 124, 57, 1)',
                    'rgba(56, 204, 167, 1)',
                    'rgba(213, 240, 117, 1)',
                    'rgba(247, 135, 223, 1)'
                ],
                borderWidth: 1,
                lineTension: 0,
            };

            var datasetvalues = {
                labels: Pathologies, // x-azis label values
                datasets: [Patholog] // y-axis
            };

            barChartOptions = {
                indexAxis: 'x',
                responsive: true,
                maintainAspectRatio: false,
                plugins: {

                },
                scales: {
                    x: {
                        barPercentage: 1,
                        categoryPercentage: 0.6,
                        ticks: {
                            font: {
                                size: 14,
                            }
                        }
                    },
                    y: {
                        barPercentage: 1,
                        categoryPercentage: 0.6,
                        ticks: {
                            beginAtZero: true,
                            font: {
                                size: 16,
                            }
                        }
                    },
                }
            }

            Chart.defaults.plugins.legend.display = false;

            var verticalBarChart = new Chart(
                document.getElementById('bar-chart').getContext('2d'), {
                type: 'bar',
                data: datasetvalues,
                options: barChartOptions,
            });

            var Count = [];
            var Pockets = [];

            @if (Model.GetData2(Model.B, Model.G).Count > 0)
            {
                foreach (var item in Model.GetData2(Model.B, Model.G))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }

                var Pocket = {
                label: "Pocket",
                data: Count,
                backgroundColor: 'rgba(255, 99, 132, 0.5)',
                borderColor: 'crimson',
                borderWidth: 3,
                lineTension: 0,
                cubicInterpolationMode: 'monotone',
                fill: true
            };

            var datasetvalues = {
                labels: Pockets, // x-azis label values
                datasets: [Pocket] // y-axis
            };


            var lineChartOptions = {
                indexAxis: 'x',
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                   
                },
                scales: {
                    x: {
                        ticks: {
                            font: {
                                size: 16,
                            }
                        }
                    },
                    y: {
                        ticks: {
                            font: {
                                size: 16,
                            }
                        }
                    },
                }
            };
            
            var LineChart = new Chart(
                document.getElementById('bar-chart2').getContext('2d'), {
                type: 'line',
                data: datasetvalues,
                options: lineChartOptions
            });

        </script>

        <script>
            function updateBar() {
                var element = document.getElementById("G");

                var Count = [];
                var Pathologies = ["Изм.Конт.", "Клин.Форм.", "Грыжи Шморля", "Остеоп.", "Умен.Выс.", "Изм.Апоф.", "Остеох.", "Стаб.Изм.", "ЭНМГ"];

                var buff = parseInt(element.value);

                switch(buff)
                {
                    case 1:
                                @if (Model.GetData1(1).Count > 0)
                                {
                                    foreach (var item in Model.GetData1(1))
                                    {
                                        @:Count.push(@item.Count);
                                    }
                                }
                    break;
                    case 2:
                            @if (Model.GetData1(2).Count > 0)
                            {
                                foreach (var item in Model.GetData1(2))
                                {
                                    @:Count.push(@item.Count);
                                }
                            }
                    break;
                    case 3:
                    @if (Model.GetData1(3).Count > 0)
                    {
                        foreach (var item in Model.GetData1(3))
                        {
                            @:Count.push(@item.Count);
                        }
                    }
                    break;
                    default:
            @if (Model.GetData1(Model.G).Count > 0)
            {
                foreach (var item in Model.GetData1(Model.G))
                {
                    @:Count.push(@item.Count);
                }
            }
                }

                            var Patholog = {
                            label: "Patholog",
                            data: Count,
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.5)',
                                'rgba(54, 162, 235, 0.5)',
                                'rgba(255, 206, 86, 0.5)',
                                'rgba(75, 192, 80, 0.5)',
                                'rgba(153, 102, 255, 0.5)',
                                'rgba(242, 124, 13, 0.5)',
                                'rgba(56, 204, 167, 0.5)',
                                'rgba(213, 240, 117, 0.5)',
                                'rgba(247, 135, 223, 0.5)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 80, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(242, 124, 57, 1)',
                                'rgba(56, 204, 167, 1)',
                                'rgba(213, 240, 117, 1)',
                                'rgba(247, 135, 223, 1)'
                            ],
                            borderWidth: 1,
                            lineTension: 0,
                        };

                        var datasetvalues = {
                            labels: Pathologies, // x-azis label values
                            datasets: [Patholog] // y-axis
                        };

                        verticalBarChart.data = datasetvalues;
                        verticalBarChart.update();
            }
        </script>

        <script>
            function updateCharts() {
                var element = document.getElementById("N");
                var elementT = document.getElementById("text");
                var elementG = document.getElementById("G2");
                var col = document.getElementById("col");

                        var Count = [];
                        
                        var Pockets = [];

                        var A = parseInt(element.value);
                        var B = parseInt(elementG.value);

                switch (A) {
                    case 1:
                    switch(B){
                        case 1:
            @if (Model.GetData2(1, 1).Count > 0)
            {
                foreach (var item in Model.GetData2(1, 1))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                        break;
                        case 2:
            @if (Model.GetData2(1, 2).Count > 0)
            {
                foreach (var item in Model.GetData2(1, 2))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                        break;
                        case 3:
            @if (Model.GetData2(1, 3).Count > 0)
            {
                foreach (var item in Model.GetData2(1, 3))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                        break;
                        default:
            @if (Model.GetData2(1, Model.G).Count > 0)
            {
                foreach (var item in Model.GetData2(1, Model.G))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                    }
                            elementT.textContent='Кальций сыворотки крови (ммоль/л)';
                                break;
                    case 2:
                        switch (B) {
                            case 1:
            @if (Model.GetData2(2, 1).Count > 0)
            {
                foreach (var item in Model.GetData2(2, 1))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 2:
            @if (Model.GetData2(2, 2).Count > 0)
            {
                foreach (var item in Model.GetData2(2, 2))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 3:
            @if (Model.GetData2(2, 3).Count > 0)
            {
                foreach (var item in Model.GetData2(2, 3))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            default:
            @if (Model.GetData2(2, Model.G).Count > 0)
            {
                foreach (var item in Model.GetData2(2, Model.G))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                }
                            elementT.textContent='Фосфор сыворотки крови (ммоль/л)';
                                break;
                    case 3:
                        switch (B) {
                            case 1:
            @if (Model.GetData2(3, 1).Count > 0)
            {
                foreach (var item in Model.GetData2(3, 1))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 2:
            @if (Model.GetData2(3, 2).Count > 0)
            {
                foreach (var item in Model.GetData2(3, 2))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 3:
            @if (Model.GetData2(3, 3).Count > 0)
            {
                foreach (var item in Model.GetData2(3, 3))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            default:
            @if (Model.GetData2(3, Model.G).Count > 0)
            {
                foreach (var item in Model.GetData2(3, Model.G))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                }
                            elementT.textContent='Оксипролин сыворотки крови (ммоль/л)';
                                break;
                    case 4:
                        switch (B) {
                            case 1:
            @if (Model.GetData2(4, 1).Count > 0)
            {
                foreach (var item in Model.GetData2(4, 1))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 2:
            @if (Model.GetData2(4, 2).Count > 0)
            {
                foreach (var item in Model.GetData2(4, 2))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 3:
            @if (Model.GetData2(4, 3).Count > 0)
            {
                foreach (var item in Model.GetData2(4, 3))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            default:
            @if (Model.GetData2(4, Model.G).Count > 0)
            {
                foreach (var item in Model.GetData2(4, Model.G))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                }
                            elementT.textContent='Экскреция кальция (мМ/сутки)';
                                            break;
                    case 5:
                        switch (B) {
                            case 1:
            @if (Model.GetData2(5, 1).Count > 0)
            {
                foreach (var item in Model.GetData2(5, 1))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 2:
            @if (Model.GetData2(5, 2).Count > 0)
            {
                foreach (var item in Model.GetData2(5, 2))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 3:
            @if (Model.GetData2(5, 3).Count > 0)
            {
                foreach (var item in Model.GetData2(5, 3))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            default:
            @if (Model.GetData2(5, Model.G).Count > 0)
            {
                foreach (var item in Model.GetData2(5, Model.G))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                }
                            elementT.textContent='Экскреция фосфора (ммоль/л)';
                                            break;
                    case 6:
                        switch (B) {
                            case 1:
            @if (Model.GetData2(6, 1).Count > 0)
            {
                foreach (var item in Model.GetData2(6, 1))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 2:
            @if (Model.GetData2(6, 2).Count > 0)
            {
                foreach (var item in Model.GetData2(6, 2))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 3:
            @if (Model.GetData2(6, 3).Count > 0)
            {
                foreach (var item in Model.GetData2(6, 3))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            default:
            @if (Model.GetData2(6, Model.G).Count > 0)
            {
                foreach (var item in Model.GetData2(6, Model.G))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                }
                            elementT.textContent='Экскреция оксипролина (мкм/мг креатинина)';
                                            break;
                    case 7:
                        switch (B) {
                            case 1:
            @if (Model.GetData2(7, 1).Count > 0)
            {
                foreach (var item in Model.GetData2(7, 1))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 2:
            @if (Model.GetData2(7, 2).Count > 0)
            {
                foreach (var item in Model.GetData2(7, 2))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            case 3:
            @if (Model.GetData2(7, 3).Count > 0)
            {
                foreach (var item in Model.GetData2(7, 3))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                    break;
                            default:
            @if (Model.GetData2(7, Model.G).Count > 0)
            {
                foreach (var item in Model.GetData2(7, Model.G))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                                }
                            elementT.textContent='Степень выраженности ДСТ по Т.Милковской-Димитровой (в баллах)';
                                            break;
                    default:
            @if (Model.GetData2(Model.B, Model.G).Count > 0)
            {
                foreach (var item in Model.GetData2(Model.B, Model.G))
                {
                    @:Count.push(@item.Count);
                    @:Pockets.push('@item.Pocket');
                }
            }
                            elementT.textContent='Кальций сыворотки крови (ммоль/л)';
                            }

                var Pocket = {
                            label: "Pocket",
                            data: Count,
                            backgroundColor: addAlpha(col.value,0.2),
                            borderColor: col.value,
                            borderWidth: 3,
                            lineTension: 0,
                            cubicInterpolationMode: 'monotone',
                            fill: true
                        };

                        var datasetvalues = {
                            labels: Pockets, // x-azis label values
                            datasets: [Pocket] // y-axis
                        };

                        LineChart.data = datasetvalues;
                        LineChart.update();
            }
        </script>
	}
</body>